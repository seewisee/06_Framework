package edu.kh.project.member.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Controller // 요청/응답 클래스 + bean 등록(Spring이 관리하는 객체)
@RequestMapping("/member") // 공통된 주소 앞부분 작성
							// member로 시작하는 요청은 해당 컨트롤러에서 처리
public class MemberController {

	// 로그인 : /member/login
	// 로그아웃 : /member/logout

	// 로그인(member/login), POST 방식 처리
	// Class에 작성한 /member를 제외한 나머지 부분을 주소로 작성
	// @RequestMapping(value ="/login", method=RequestMethod.POST)
	public String login(HttpServletRequest req) {

		// 파라미터 전달 방법 1: HttpServletRequest를 이용하는 방법
		// -> controller 메소드에 매개변수로 HttpSerlvetRequest 작성

		// 매개변수에 적으면 왜 사용이 가능할까??
		// Spring Framework가 제공하는
		// Argument Resolver(매개변수 해결사)가 해결해줘서

		String inputEmail = req.getParameter("inputEmail");

		System.out.println("inputEmail : " + inputEmail);

		// ** redirect 방법! **

		// "redirect : 요청주소"

		return "redirect:/";
	}

	// @PostMapping
	// -> @RequestMapping의 자식으로
	//		POST 방식 요청을 연결하는 어노테이션
	@PostMapping("/login")
	public String login(/*@RequestParam("inputEmail")*/String inputEmail,
			/*@RequestParam("inputPw")*/String inputPw){

		// 파라미터 전달 방법 2 : @RequestParam 어노테이션 이용
		
		// @RequestParam 어노테이션
		
		// - request객체를 이용한 파라미터 전달 어노테이션
		// - 매개변수 앞에 해당 어노테이션을 작성하면 매개변수에 값이 주입됨.
		
		System.out.println("inputEmail : " + inputEmail);
		System.out.println("inputPw : " + inputPw);

		return "redirect:/";
	}

}
